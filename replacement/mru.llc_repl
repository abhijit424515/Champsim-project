#include "cache.h"

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    for (uint32_t i = 0; i < NUM_SET; i++) {
        for (uint32_t j = 0; j < NUM_WAY; j++) {
            block[i][j].lru = NUM_WAY - j - 1; // Initialize MRU state
        }
    }
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    uint32_t way = 0;

    // fill invalid line first
    for (way=0; way<NUM_WAY; way++) {
        if (block[set][way].valid == false) {

            DP ( if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " mru: " << block[set][way].lru << endl; });

            break;
        }
    }
    if (way == NUM_WAY) {
        way = 0; //max lfu
        for (int i=1; i<NUM_WAY; i++) {
            if(block[set][way].lru <= block[set][i].lru){
                way = i;
            }
        }
        DP ( if (warmup_complete[cpu]) {
        cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " replace set: " << set << " way: " << way;
        cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
        cout << dec << " lfu: " << block[set][way].lfu << endl; });
    }

    return way;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    if (hit && (type == WRITEBACK)) // writeback hit does not update MRU state
        return;

    if (way != 0) {
        // Update the MRU state of the hit block
        uint32_t mru_state = block[set][way].lru;
        for (uint32_t i = 0; i < NUM_WAY; i++) {
            if (block[set][way].valid && block[set][way].lru > 0) {
                block[set][way].lru--;
            }
        }
        block[set][way].lru = NUM_WAY - 1;
    }
    else {
        // Update the MRU state of the newly inserted block
        block[set][way].lru = NUM_WAY - 1;
    }
}

void CACHE::llc_replacement_final_stats()
{

}
